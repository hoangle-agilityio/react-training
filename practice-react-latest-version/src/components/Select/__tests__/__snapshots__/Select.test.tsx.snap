// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select Component Should match snapshoot for Select 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="css-2mxtj7"
      >
        <label
          class="chakra-form__label css-2dkmm4"
          for="food:r0:"
        >
          Food
        </label>
        <div
          class=" css-b62m3t-container"
        >
          <span
            class="css-1f43avz-a11yText-A11yText"
            id="react-select-2-live-region"
          />
          <span
            aria-atomic="false"
            aria-live="polite"
            aria-relevant="additions text"
            class="css-1f43avz-a11yText-A11yText"
          />
          <div
            class=" css-e6llx3-Control"
          >
            <div
              class=" css-1fdsijx-ValueContainer"
            >
              <div
                class=" css-1jqq78o-placeholder"
                id="react-select-2-placeholder"
              >
                Select...
              </div>
              <div
                class=" css-qbdosj-Input"
                data-value=""
              >
                <input
                  aria-autocomplete="list"
                  aria-describedby="react-select-2-placeholder"
                  aria-expanded="false"
                  aria-haspopup="true"
                  autocapitalize="none"
                  autocomplete="off"
                  autocorrect="off"
                  class=""
                  id="food:r0:"
                  role="combobox"
                  spellcheck="false"
                  style="opacity: 1; width: 100%; grid-area: 1 / 2; min-width: 2px; border: 0px; margin: 0px; outline: 0; padding: 0px;"
                  tabindex="0"
                  type="text"
                  value=""
                />
              </div>
            </div>
            <div
              class=" css-1hb7zxy-IndicatorsContainer"
            >
              <svg
                class="chakra-icon css-1xmw5wu"
                focusable="false"
                viewBox="0 0 24 24"
              >
                <path
                  d="M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
                  fill="currentColor"
                />
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="css-2mxtj7"
    >
      <label
        class="chakra-form__label css-2dkmm4"
        for="food:r0:"
      >
        Food
      </label>
      <div
        class=" css-b62m3t-container"
      >
        <span
          class="css-1f43avz-a11yText-A11yText"
          id="react-select-2-live-region"
        />
        <span
          aria-atomic="false"
          aria-live="polite"
          aria-relevant="additions text"
          class="css-1f43avz-a11yText-A11yText"
        />
        <div
          class=" css-e6llx3-Control"
        >
          <div
            class=" css-1fdsijx-ValueContainer"
          >
            <div
              class=" css-1jqq78o-placeholder"
              id="react-select-2-placeholder"
            >
              Select...
            </div>
            <div
              class=" css-qbdosj-Input"
              data-value=""
            >
              <input
                aria-autocomplete="list"
                aria-describedby="react-select-2-placeholder"
                aria-expanded="false"
                aria-haspopup="true"
                autocapitalize="none"
                autocomplete="off"
                autocorrect="off"
                class=""
                id="food:r0:"
                role="combobox"
                spellcheck="false"
                style="opacity: 1; width: 100%; grid-area: 1 / 2; min-width: 2px; border: 0px; margin: 0px; outline: 0; padding: 0px;"
                tabindex="0"
                type="text"
                value=""
              />
            </div>
          </div>
          <div
            class=" css-1hb7zxy-IndicatorsContainer"
          >
            <svg
              class="chakra-icon css-1xmw5wu"
              focusable="false"
              viewBox="0 0 24 24"
            >
              <path
                d="M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
                fill="currentColor"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Select Component Should match snapshoot for Select with error 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="css-2mxtj7"
      >
        <label
          class="chakra-form__label css-2dkmm4"
          for="food:r1:"
        >
          Food
        </label>
        <div
          class=" css-b62m3t-container"
        >
          <span
            class="css-1f43avz-a11yText-A11yText"
            id="react-select-3-live-region"
          />
          <span
            aria-atomic="false"
            aria-live="polite"
            aria-relevant="additions text"
            class="css-1f43avz-a11yText-A11yText"
          />
          <div
            class=" css-rlg6yc-Control"
          >
            <div
              class=" css-1fdsijx-ValueContainer"
            >
              <div
                class=" css-1jqq78o-placeholder"
                id="react-select-3-placeholder"
              >
                Select...
              </div>
              <div
                class=" css-qbdosj-Input"
                data-value=""
              >
                <input
                  aria-autocomplete="list"
                  aria-describedby="react-select-3-placeholder"
                  aria-expanded="false"
                  aria-haspopup="true"
                  autocapitalize="none"
                  autocomplete="off"
                  autocorrect="off"
                  class=""
                  id="food:r1:"
                  role="combobox"
                  spellcheck="false"
                  style="opacity: 1; width: 100%; grid-area: 1 / 2; min-width: 2px; border: 0px; margin: 0px; outline: 0; padding: 0px;"
                  tabindex="0"
                  type="text"
                  value=""
                />
              </div>
            </div>
            <div
              class=" css-1hb7zxy-IndicatorsContainer"
            >
              <svg
                class="chakra-icon css-1xmw5wu"
                focusable="false"
                viewBox="0 0 24 24"
              >
                <path
                  d="M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
                  fill="currentColor"
                />
              </svg>
            </div>
          </div>
        </div>
        <p
          class="chakra-text css-1o8zp2s"
        >
          This is an error.
        </p>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="css-2mxtj7"
    >
      <label
        class="chakra-form__label css-2dkmm4"
        for="food:r1:"
      >
        Food
      </label>
      <div
        class=" css-b62m3t-container"
      >
        <span
          class="css-1f43avz-a11yText-A11yText"
          id="react-select-3-live-region"
        />
        <span
          aria-atomic="false"
          aria-live="polite"
          aria-relevant="additions text"
          class="css-1f43avz-a11yText-A11yText"
        />
        <div
          class=" css-rlg6yc-Control"
        >
          <div
            class=" css-1fdsijx-ValueContainer"
          >
            <div
              class=" css-1jqq78o-placeholder"
              id="react-select-3-placeholder"
            >
              Select...
            </div>
            <div
              class=" css-qbdosj-Input"
              data-value=""
            >
              <input
                aria-autocomplete="list"
                aria-describedby="react-select-3-placeholder"
                aria-expanded="false"
                aria-haspopup="true"
                autocapitalize="none"
                autocomplete="off"
                autocorrect="off"
                class=""
                id="food:r1:"
                role="combobox"
                spellcheck="false"
                style="opacity: 1; width: 100%; grid-area: 1 / 2; min-width: 2px; border: 0px; margin: 0px; outline: 0; padding: 0px;"
                tabindex="0"
                type="text"
                value=""
              />
            </div>
          </div>
          <div
            class=" css-1hb7zxy-IndicatorsContainer"
          >
            <svg
              class="chakra-icon css-1xmw5wu"
              focusable="false"
              viewBox="0 0 24 24"
            >
              <path
                d="M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
                fill="currentColor"
              />
            </svg>
          </div>
        </div>
      </div>
      <p
        class="chakra-text css-1o8zp2s"
      >
        This is an error.
      </p>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
